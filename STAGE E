
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "af4b47c3",
   "metadata": {},
   "source": [
    "### Author: Oluwatimilehin Folarin\n",
    "\n",
    "Date: 13-10-2022"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49441d4e",
   "metadata": {},
   "source": [
    "Hmaoye Stage E tag along code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd82de06",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bd89fde1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"Time_series_analysis_and_forecast_DATASET.csv\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "feeeaef3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FullDate</th>\n",
       "      <th>Tmax</th>\n",
       "      <th>SysLoad</th>\n",
       "      <th>GasPrice</th>\n",
       "      <th>ElecPrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01 00:00:00</td>\n",
       "      <td>15.8</td>\n",
       "      <td>1688.215</td>\n",
       "      <td>3.69</td>\n",
       "      <td>23.710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-01 01:00:00</td>\n",
       "      <td>15.8</td>\n",
       "      <td>1669.195</td>\n",
       "      <td>3.69</td>\n",
       "      <td>22.635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-01 02:00:00</td>\n",
       "      <td>15.8</td>\n",
       "      <td>1491.980</td>\n",
       "      <td>3.69</td>\n",
       "      <td>22.565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-01 03:00:00</td>\n",
       "      <td>15.8</td>\n",
       "      <td>1330.760</td>\n",
       "      <td>3.69</td>\n",
       "      <td>18.910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-01 04:00:00</td>\n",
       "      <td>15.8</td>\n",
       "      <td>1247.940</td>\n",
       "      <td>3.69</td>\n",
       "      <td>18.030</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              FullDate  Tmax   SysLoad  GasPrice  ElecPrice\n",
       "0  2010-09-01 00:00:00  15.8  1688.215      3.69     23.710\n",
       "1  2010-09-01 01:00:00  15.8  1669.195      3.69     22.635\n",
       "2  2010-09-01 02:00:00  15.8  1491.980      3.69     22.565\n",
       "3  2010-09-01 03:00:00  15.8  1330.760      3.69     18.910\n",
       "4  2010-09-01 04:00:00  15.8  1247.940      3.69     18.030"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c36d585a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(92016, 5)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "72c5da9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['FullDate']= pd.to_datetime(df['FullDate'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4491686b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 92016 entries, 0 to 92015\n",
      "Data columns (total 5 columns):\n",
      " #   Column     Non-Null Count  Dtype         \n",
      "---  ------     --------------  -----         \n",
      " 0   FullDate   92016 non-null  datetime64[ns]\n",
      " 1   Tmax       92016 non-null  float64       \n",
      " 2   SysLoad    92016 non-null  float64       \n",
      " 3   GasPrice   92016 non-null  float64       \n",
      " 4   ElecPrice  92016 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(4)\n",
      "memory usage: 3.5 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8cc8bc35",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.rename(columns={\"FullDate\": \"ds\", \"ElecPrice\": \"y\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f6988a0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from prophet import Prophet\n",
    "\n",
    "model = Prophet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e6a2f0a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = df.iloc[:2757]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9accd92b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2757, 5)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d5fc61c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>Tmax</th>\n",
       "      <th>SysLoad</th>\n",
       "      <th>GasPrice</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2752</th>\n",
       "      <td>2010-12-24 16:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1799.49565</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>36.770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2753</th>\n",
       "      <td>2010-12-24 17:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1869.43815</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>35.060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2754</th>\n",
       "      <td>2010-12-24 18:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1836.26230</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>27.980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755</th>\n",
       "      <td>2010-12-24 19:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1716.70845</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>28.115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756</th>\n",
       "      <td>2010-12-24 20:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1562.13960</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>27.690</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      ds  Tmax     SysLoad  GasPrice       y\n",
       "2752 2010-12-24 16:00:00  33.3  1799.49565    3.0988  36.770\n",
       "2753 2010-12-24 17:00:00  33.3  1869.43815    3.0988  35.060\n",
       "2754 2010-12-24 18:00:00  33.3  1836.26230    3.0988  27.980\n",
       "2755 2010-12-24 19:00:00  33.3  1716.70845    3.0988  28.115\n",
       "2756 2010-12-24 20:00:00  33.3  1562.13960    3.0988  27.690"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8b1e5627",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = df.iloc[2757:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a5e40f96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>Tmax</th>\n",
       "      <th>SysLoad</th>\n",
       "      <th>GasPrice</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2757</th>\n",
       "      <td>2010-12-24 21:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1513.57905</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>24.870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2758</th>\n",
       "      <td>2010-12-24 22:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1341.05455</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>22.820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2759</th>\n",
       "      <td>2010-12-24 23:00:00</td>\n",
       "      <td>33.3</td>\n",
       "      <td>1135.43285</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>21.185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2760</th>\n",
       "      <td>2010-12-25 00:00:00</td>\n",
       "      <td>31.7</td>\n",
       "      <td>1169.16690</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>20.120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2761</th>\n",
       "      <td>2010-12-25 01:00:00</td>\n",
       "      <td>31.7</td>\n",
       "      <td>1209.20920</td>\n",
       "      <td>3.0988</td>\n",
       "      <td>18.065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      ds  Tmax     SysLoad  GasPrice       y\n",
       "2757 2010-12-24 21:00:00  33.3  1513.57905    3.0988  24.870\n",
       "2758 2010-12-24 22:00:00  33.3  1341.05455    3.0988  22.820\n",
       "2759 2010-12-24 23:00:00  33.3  1135.43285    3.0988  21.185\n",
       "2760 2010-12-25 00:00:00  31.7  1169.16690    3.0988  20.120\n",
       "2761 2010-12-25 01:00:00  31.7  1209.20920    3.0988  18.065"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ea0b57ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1 = df[[\"ds\", \"y\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0339f888",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01 00:00:00</td>\n",
       "      <td>23.710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-01 01:00:00</td>\n",
       "      <td>22.635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-01 02:00:00</td>\n",
       "      <td>22.565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-01 03:00:00</td>\n",
       "      <td>18.910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-01 04:00:00</td>\n",
       "      <td>18.030</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ds       y\n",
       "0 2010-09-01 00:00:00  23.710\n",
       "1 2010-09-01 01:00:00  22.635\n",
       "2 2010-09-01 02:00:00  22.565\n",
       "3 2010-09-01 03:00:00  18.910\n",
       "4 2010-09-01 04:00:00  18.030"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "04d525de",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "09:15:21 - cmdstanpy - INFO - Chain [1] start processing\n",
      "09:16:29 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<prophet.forecaster.Prophet at 0x11fcc97c310>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(df_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2cc7e87e",
   "metadata": {},
   "outputs": [],
   "source": [
    "future = model.make_future_dataframe(periods=10, freq='D')\n",
    "forecast = model.predict(future)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5ad27b5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-01 01:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-01 02:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-01 03:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-01 04:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92021</th>\n",
       "      <td>2021-03-06 23:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92022</th>\n",
       "      <td>2021-03-07 23:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92023</th>\n",
       "      <td>2021-03-08 23:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92024</th>\n",
       "      <td>2021-03-09 23:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92025</th>\n",
       "      <td>2021-03-10 23:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>92026 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       ds\n",
       "0     2010-09-01 00:00:00\n",
       "1     2010-09-01 01:00:00\n",
       "2     2010-09-01 02:00:00\n",
       "3     2010-09-01 03:00:00\n",
       "4     2010-09-01 04:00:00\n",
       "...                   ...\n",
       "92021 2021-03-06 23:00:00\n",
       "92022 2021-03-07 23:00:00\n",
       "92023 2021-03-08 23:00:00\n",
       "92024 2021-03-09 23:00:00\n",
       "92025 2021-03-10 23:00:00\n",
       "\n",
       "[92026 rows x 1 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "future"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aa5828ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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kUdw9uxZDB48GD169MCUKVMAAF26dMGYMWPQuXNnDBs2DAsXLoQkSTCZTHjzzTcxdOhQdOrUCWPGjEGXLl0AAPPnz8fLL7+MuLg4FBYWYvLkyf5aFSIiIiKqRwRFUZRgFyKQEhISkJOTE+xikBcFBQVshxXGWH/hjfUXvlh34Y31F1zlxYUcSY+IiIiIyIABMhERERGRAQNkIiIiIiIDBshERERERAYMkImIiIiIDBggExEREREZMEAmIqJ6x2azITU1FTabLdhFIaIQFPChpomIiILJZrNh0KBBsNvtsFgsyMjIgNVqDXaxiCiEMINMRET1SmZmJux2O1wuF+x2OzIzM4NdJCIKMQyQiYioXklMTITFYoEkSbBYLEhMTAx2kYgoxLCJBRER1StWqxUZGRnIzMxEYmIim1cQURkMkImIqN6xWq0MjImoXGxiQURERERkwACZiIiIiMiAATIRERERkQEDZCIiIiIiAwbIREREREQGDJCJiIiIiAwYIBMRERERGTBAJiIiIiIyYIBMRERERGTAAJmIiIiIyIABMhERERGRAQNkIiIiIiIDBshERERERAYMkImIiIiIDBggExEREREZMEAmIiIiIjJggExEREREZMAAmYiIiIjIgAEyEREREZEBA2QiIiIiIgMGyEREREREBgyQiYiIiIgMGCATERERERn4LUCeNGkSWrZsieuvv16fdvLkSQwePBgdOnTA4MGDUVRUBABQFAWPPfYY4uLi0K1bN+zYsUP/zdKlS9GhQwd06NABS5cu1afn5uaia9euiIuLw2OPPQZFUfy1KkRERERUj/gtQL7vvvuwbt06j2nz5s3DoEGDcODAAQwaNAjz5s0DAKxduxYHDhzAgQMHkJaWhqlTpwJQA+o5c+Zg27ZtyM7Oxpw5c/SgeurUqfj3v/+t/670soiIiIiIasJvAXL//v3RvHlzj2mrV6/GxIkTAQATJ07EqlWr9OkTJkyAIAjo168fTp06hSNHjuCrr77C4MGD0bx5c0RFRWHw4MFYt24djhw5gjNnzqBfv34QBAETJkzQ50VEREREVBumQC7s2LFjaNOmDQCgdevWOHbsGAAgPz8f7dq1078XGxuL/Pz8CqfHxsaWmV6etLQ0pKWlAQCOHj2KgoICn64X+cbx48eDXQSqBdZfeGP9hS/WXXhj/YWmgAbIRoIgQBCEgCwrOTkZycnJAICEhAS0bds2IMul6mPdhDfWX3hj/YUv1l14Y/2FnoD2YtGqVSscOXIEAHDkyBG0bNkSABATE4PDhw/r38vLy0NMTEyF0/Py8spMJyIiIiKqrYAGyElJSXpPFEuXLsXw4cP16enp6VAUBVu3bkXTpk3Rpk0bDB06FOvXr0dRURGKioqwfv16DB06FG3atEGTJk2wdetWKIqC9PR0fV5ERERERLXhtyYWd999NzIzM3HixAnExsZizpw5mDFjBsaMGYPFixejffv2+PjjjwEAt912G7788kvExcWhYcOGWLJkCQCgefPmmDVrFnr37g0AeOGFF/QX//71r3/hvvvuw8WLF3Hrrbfi1ltv9deqEBEREVE9Iij1rAPhhIQE5OTkBLsY5EVBQQHbYYUx1l94Y/2Fr/pedzabDZmZmUhMTITVag12caqtvtdfsJUXFwbtJT0iIiKi2rDZbBg0aBDsdjssFgsyMjLCMkim0MOhpomIiCgsZWZmwm63w+VywW63IzMzM9hFojqCATIRERGFpcTERFgsFkiSBIvFgsTExGAXieoINrEgIiKisGS1WpGRkRHWbZApNDFAJiIiorBltVoZGJPPsYkFEREREZEBA2QiIiIiIgMGyEREREREBgyQiYiIiIgMGCATERERERkwQCYiIiIiMmCATERERERkwACZiIiIiMiAATIRERERkQEDZCIiIiIiAwbIREREREQGDJCJiIiIiAwYIBMRERERGTBAJiIiIiIyYIBMRERERGTAAJmIiIiIyIABMhERERGRAQNkIiIiIiIDBshERERERAYMkImIiIiIDBggExEREREZMEAmIiIiIjJggExEREREZMAAmYiIiIjIgAEyEREREZEBA2QiIiIiIgMGyEREREREBgyQiYiIiIgMGCATERERERmYgl0AIgpfNpsNmZmZSExMRPv27YNdHCKisGY8p1qt1mAXp14LSgb5lVdeQZcuXXD99dfj7rvvRnFxMQ4ePIi+ffsiLi4OY8eOhd1uBwCUlJRg7NixiIuLQ9++fXHo0CF9PqmpqYiLi8O1116Lr776KhirQlRv2Ww2DBo0CLNmzcKgQYOQk5MT7CIREYWt0udUm80W7CLVawEPkPPz8/H6668jJycHe/fuhcvlwvLlyzF9+nQ8+eST+OWXXxAVFYXFixcDABYvXoyo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IiLytcLCQoiiGmaJoojCwsJKf+PvGIGqjgFygPk7gOUQr5XzNnIPERGRLyUmJupDVUdERFTpes8kV+hgE4sAC0Q3bHwDtmJsYkFERP5Wk+s9u2oNHQyQg4ABbHDxBERERIFQk+s9Y4TQwACZ6iWegIiIiKg8bINMRERERGTAAJmIiIiIyIABMhERERGRAQNkIiIiIiIDBshERERERAYMkImIiIiIDBggExEREREZMEAmIiIiIjJggExEREREZMAAmYiIiIjIgAEyEREREZEBA2QiIiIiIgMGyEREREREBoKiKEqwCxFIl19+Oa688spgF4O8OH78OFq0aBHsYlANsf7CG+svfLHuwhvrL7gOHTqEEydOlJle7wJkCl0JCQnIyckJdjGohlh/4Y31F75Yd+GN9Rea2MSCiIiIiMiAATIRERERkQEDZAoZycnJwS4C1QLrL7yx/sIX6y68sf5CE9sgExEREREZMINMRERERGTAAJmIiIiIyIABMvnV4cOHMWDAAHTu3BldunTBa6+9BgA4efIkBg8ejA4dOmDw4MEoKioCAPz444+wWq2IiIjAP//5z0rnQ/7jq7rTuFwu9OzZE3fccUdA16O+8mX9nTp1CqNHj8Z1112HTp06wWazBXx96hNf1t0rr7yCLl264Prrr8fdd9+N4uLigK9PfVPd+lu2bBm6deuGrl274oYbbsDu3bv1ea1btw7XXnst4uLiMG/evKCsT33FNsjkV0eOHMGRI0fQq1cvnD17FvHx8Vi1ahXeffddNG/eHDNmzMC8efNQVFSE+fPn4/fff8f//vc/rFq1ClFRUXj66acrnE/nzp2DvIZ1l6/qTvPyyy8jJycHZ86cwRdffBGktao/fFl/EydOxM0334wHHngAdrsdFy5cQLNmzYK3cnWcr+ouPz8fN910E/bv34/IyEiMGTMGt912G+67777grmAdV936y8rKQqdOnRAVFYW1a9di9uzZ2LZtG1wuFzp27Iivv/4asbGx6N27Nz788ENe9wKEGWTyqzZt2qBXr14AgMsuuwydOnVCfn4+Vq9ejYkTJwJQL76rVq0CALRs2RK9e/eG2Wyu0nzIf3xVdwCQl5eHNWvW4IEHHghY+es7X9Xf6dOnsWnTJkyePBkAYLFYGBz7mS+PPafTiYsXL8LpdOLChQto27ZtwNajvqpu/d1www2IiooCAPTr1w95eXkAgOzsbMTFxeHqq6+GxWLBuHHjsHr16sCvUD3FAJkC5tChQ9i5cyf69u2LY8eOoU2bNgCA1q1b49ixYzWaDwVGbevuiSeewIIFCyCKPOUEQ23q7+DBg2jRogXuv/9+9OzZEw888ADOnz8fiGITald3MTExePrpp3HFFVegTZs2aNq0KYYMGRKIYpNbdetv8eLFuPXWWwGoTwDatWun/y02NpaJoQDi1YoC4ty5cxg1ahReffVVNGnSxONvgiBAEIRaz4f8o7Z198UXX6Bly5aIj4/3ZzGpHLWtP6fTiR07dmDq1KnYuXMnGjVqxLaQAVLbuisqKsLq1atx8OBBFBQU4Pz583j//ff9WWQyqG79bdy4EYsXL8b8+fMDWUwqBwNk8juHw4FRo0Zh/PjxGDlyJACgVatWOHLkCAC1vVbLli1rNB/yL1/U3ZYtW/DZZ5/hyiuvxLhx47Bhwwbcc889fi87+ab+YmNjERsbqz+xGT16NHbs2OHfgpNP6u6bb77BVVddhRYtWsBsNmPkyJHIysrye9mp+vW3Z88ePPDAA1i9ejWio6MBqE8ADh8+rH8nLy8PMTExAVyL+o0BMvmVoiiYPHkyOnXqhKeeekqfnpSUhKVLlwIAli5diuHDh9doPuQ/vqq71NRU5OXl4dChQ1i+fDkGDhzILFYA+Kr+WrdujXbt2uGnn34CAGRkZPAlIT/zVd1dccUV2Lp1Ky5cuABFUZCRkYFOnTr5texU/fr77bffMHLkSLz33nvo2LGj/v3evXvjwIEDOHjwIOx2O5YvX46kpKTArkx9phD50XfffacAULp27ap0795d6d69u7JmzRrlxIkTysCBA5W4uDhl0KBBSmFhoaIoinLkyBElJiZGueyyy5SmTZsqMTExyunTp8udD/mPr+rOaOPGjcrtt98ejNWpd3xZfzt37lTi4+OVrl27KsOHD1dOnjwZzFWr83xZdy+88IJy7bXXKl26dFHuuecepbi4OJirVi9Ut/4mT56sNGvWTP9ufHy8Pq81a9YoHTp0UK6++mrl73//e7BWqV5iN29ERERERAZsYkFEREREZMAAmYiIiIjIgAEyEREREZEBA2QiIiIiIgMGyEREREREBgyQiYjqkdmzZ+Of//xnsItBRBTSGCATERERERkwQCYiquNefPFFdOzYETfddJM+It7rr7+Ozp07o1u3bhg3blyQS0hEFFpMwS4AERH5T25uLpYvX45du3bB6XSiV69eiI+Px7x583Dw4EFERETg1KlTwS4mEVFIYQaZiKgO++6773DXXXehYcOGaNKkCZKSkgAA3bp1w/jx4/H+++/DZGKuhIjIiAEyEVE9tGbNGjz88MPYsWMHevfuDafTGewiERGFDAbIRER1WP/+/bFq1SpcvHgRZ8+exeeffw5ZlnH48GEMGDAA8+fPx+nTp3Hu3LlgF5WIKGTwuRoRUR3Wq1cvjB07Ft27d0fLli3Ru3dvCIKAe+65B6dPn4aiKHjsscfQrFmzYBeViChkCIqiKMEuBBERERFRqGATCyIiIiIiAwbIREREREQGDJCJiIiIiAwYIBMRERERGTBAJiIiIiIyYIBMRERERGTAAJmIiIiIyOD/AX0cBU+BCQfnAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.plot(forecast)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f8c44c91",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_model = Prophet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "233b51e2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f4edfe2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 2.4474966090684217e-30\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "\n",
    "adf_result = adfuller(df['SysLoad'])\n",
    "\n",
    "print(f'p-value: {adf_result[1]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cfdb8366",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 2.3337605343635197e-09\n"
     ]
    }
   ],
   "source": [
    "adf_result1 = adfuller(df['GasPrice'])\n",
    "\n",
    "print(f'p-value: {adf_result1[1]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ccb0741f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_2 = adfuller(df_1[\"y\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "29dd8471",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ADF Statistic: -31.95297569955783\n",
      "p-value: 0.0\n",
      "No. of lags used: 53\n",
      "No. of observations used : 91962\n",
      "Critical Values:\n",
      " 1%: -3.430421110703783\n",
      " 5%: -2.8615714297867108\n",
      " 10%: -2.56678672898094\n"
     ]
    }
   ],
   "source": [
    "print(f'ADF Statistic: {df_2[0]}')\n",
    "print(f'p-value: {df_2[1]}')\n",
    "print(f'No. of lags used: {df_2[2]}')\n",
    "print(f'No. of observations used : {df_2[3]}')\n",
    "print('Critical Values:')\n",
    "for k, v in df_2[4].items():\n",
    "    print(f' {k}: {v}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b9f34eb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_copy = df_1.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6df823dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_copy\n",
    "y  = df_copy.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c97522aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = int(len(X))\n",
    "X_train, X_test = X[:2757], X[2757:]\n",
    "y_train, y_test = y[:2757], y[2757:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "59e1f767",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "09:22:07 - cmdstanpy - INFO - Chain [1] start processing\n",
      "09:22:08 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<prophet.forecaster.Prophet at 0x11fca4deb90>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1 = Prophet()\n",
    "model1.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "947f703c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>trend</th>\n",
       "      <th>yhat_lower</th>\n",
       "      <th>yhat_upper</th>\n",
       "      <th>trend_lower</th>\n",
       "      <th>trend_upper</th>\n",
       "      <th>additive_terms</th>\n",
       "      <th>additive_terms_lower</th>\n",
       "      <th>additive_terms_upper</th>\n",
       "      <th>daily</th>\n",
       "      <th>...</th>\n",
       "      <th>weekly</th>\n",
       "      <th>weekly_lower</th>\n",
       "      <th>weekly_upper</th>\n",
       "      <th>yearly</th>\n",
       "      <th>yearly_lower</th>\n",
       "      <th>yearly_upper</th>\n",
       "      <th>multiplicative_terms</th>\n",
       "      <th>multiplicative_terms_lower</th>\n",
       "      <th>multiplicative_terms_upper</th>\n",
       "      <th>yhat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01 00:00:00</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>-251.279867</td>\n",
       "      <td>283.839565</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>-7.335778</td>\n",
       "      <td>-7.335778</td>\n",
       "      <td>-7.335778</td>\n",
       "      <td>-4.533333</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.250893</td>\n",
       "      <td>-1.250893</td>\n",
       "      <td>-1.250893</td>\n",
       "      <td>-1.551552</td>\n",
       "      <td>-1.551552</td>\n",
       "      <td>-1.551552</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.696298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-01 01:00:00</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>-246.417882</td>\n",
       "      <td>290.176911</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>-10.297534</td>\n",
       "      <td>-10.297534</td>\n",
       "      <td>-10.297534</td>\n",
       "      <td>-7.568327</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.151571</td>\n",
       "      <td>-1.151571</td>\n",
       "      <td>-1.151571</td>\n",
       "      <td>-1.577636</td>\n",
       "      <td>-1.577636</td>\n",
       "      <td>-1.577636</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.735349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-01 02:00:00</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>-262.819846</td>\n",
       "      <td>297.401886</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>-19.618104</td>\n",
       "      <td>-19.618104</td>\n",
       "      <td>-19.618104</td>\n",
       "      <td>-17.011030</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.003150</td>\n",
       "      <td>-1.003150</td>\n",
       "      <td>-1.003150</td>\n",
       "      <td>-1.603924</td>\n",
       "      <td>-1.603924</td>\n",
       "      <td>-1.603924</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.415587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-01 03:00:00</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>-285.447845</td>\n",
       "      <td>277.350451</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>-29.383836</td>\n",
       "      <td>-29.383836</td>\n",
       "      <td>-29.383836</td>\n",
       "      <td>-26.947330</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.806090</td>\n",
       "      <td>-0.806090</td>\n",
       "      <td>-0.806090</td>\n",
       "      <td>-1.630416</td>\n",
       "      <td>-1.630416</td>\n",
       "      <td>-1.630416</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.650663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-01 04:00:00</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>-268.862915</td>\n",
       "      <td>251.895901</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>-31.923705</td>\n",
       "      <td>-31.923705</td>\n",
       "      <td>-31.923705</td>\n",
       "      <td>-29.705308</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.561286</td>\n",
       "      <td>-0.561286</td>\n",
       "      <td>-0.561286</td>\n",
       "      <td>-1.657111</td>\n",
       "      <td>-1.657111</td>\n",
       "      <td>-1.657111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.111602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2010-09-01 05:00:00</td>\n",
       "      <td>33.036115</td>\n",
       "      <td>-242.759383</td>\n",
       "      <td>268.393948</td>\n",
       "      <td>33.036115</td>\n",
       "      <td>33.036115</td>\n",
       "      <td>-24.518058</td>\n",
       "      <td>-24.518058</td>\n",
       "      <td>-24.518058</td>\n",
       "      <td>-22.564002</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.270049</td>\n",
       "      <td>-0.270049</td>\n",
       "      <td>-0.270049</td>\n",
       "      <td>-1.684006</td>\n",
       "      <td>-1.684006</td>\n",
       "      <td>-1.684006</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.518057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2010-09-01 06:00:00</td>\n",
       "      <td>33.036923</td>\n",
       "      <td>-244.239168</td>\n",
       "      <td>299.946711</td>\n",
       "      <td>33.036923</td>\n",
       "      <td>33.036923</td>\n",
       "      <td>-11.538145</td>\n",
       "      <td>-11.538145</td>\n",
       "      <td>-11.538145</td>\n",
       "      <td>-9.892953</td>\n",
       "      <td>...</td>\n",
       "      <td>0.065910</td>\n",
       "      <td>0.065910</td>\n",
       "      <td>0.065910</td>\n",
       "      <td>-1.711102</td>\n",
       "      <td>-1.711102</td>\n",
       "      <td>-1.711102</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.498778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2010-09-01 07:00:00</td>\n",
       "      <td>33.037731</td>\n",
       "      <td>-232.680436</td>\n",
       "      <td>298.488835</td>\n",
       "      <td>33.037731</td>\n",
       "      <td>33.037731</td>\n",
       "      <td>-0.523980</td>\n",
       "      <td>-0.523980</td>\n",
       "      <td>-0.523980</td>\n",
       "      <td>0.769913</td>\n",
       "      <td>...</td>\n",
       "      <td>0.444504</td>\n",
       "      <td>0.444504</td>\n",
       "      <td>0.444504</td>\n",
       "      <td>-1.738397</td>\n",
       "      <td>-1.738397</td>\n",
       "      <td>-1.738397</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.513751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2010-09-01 08:00:00</td>\n",
       "      <td>33.038539</td>\n",
       "      <td>-232.837819</td>\n",
       "      <td>301.376324</td>\n",
       "      <td>33.038539</td>\n",
       "      <td>33.038539</td>\n",
       "      <td>3.786296</td>\n",
       "      <td>3.786296</td>\n",
       "      <td>3.786296</td>\n",
       "      <td>4.688891</td>\n",
       "      <td>...</td>\n",
       "      <td>0.863294</td>\n",
       "      <td>0.863294</td>\n",
       "      <td>0.863294</td>\n",
       "      <td>-1.765889</td>\n",
       "      <td>-1.765889</td>\n",
       "      <td>-1.765889</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.824835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2010-09-01 09:00:00</td>\n",
       "      <td>33.039347</td>\n",
       "      <td>-233.240027</td>\n",
       "      <td>287.502991</td>\n",
       "      <td>33.039347</td>\n",
       "      <td>33.039347</td>\n",
       "      <td>2.120476</td>\n",
       "      <td>2.120476</td>\n",
       "      <td>2.120476</td>\n",
       "      <td>2.594537</td>\n",
       "      <td>...</td>\n",
       "      <td>1.319517</td>\n",
       "      <td>1.319517</td>\n",
       "      <td>1.319517</td>\n",
       "      <td>-1.793578</td>\n",
       "      <td>-1.793578</td>\n",
       "      <td>-1.793578</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.159823</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ds      trend  yhat_lower  yhat_upper  trend_lower  \\\n",
       "0 2010-09-01 00:00:00  33.032076 -251.279867  283.839565    33.032076   \n",
       "1 2010-09-01 01:00:00  33.032884 -246.417882  290.176911    33.032884   \n",
       "2 2010-09-01 02:00:00  33.033692 -262.819846  297.401886    33.033692   \n",
       "3 2010-09-01 03:00:00  33.034500 -285.447845  277.350451    33.034500   \n",
       "4 2010-09-01 04:00:00  33.035307 -268.862915  251.895901    33.035307   \n",
       "5 2010-09-01 05:00:00  33.036115 -242.759383  268.393948    33.036115   \n",
       "6 2010-09-01 06:00:00  33.036923 -244.239168  299.946711    33.036923   \n",
       "7 2010-09-01 07:00:00  33.037731 -232.680436  298.488835    33.037731   \n",
       "8 2010-09-01 08:00:00  33.038539 -232.837819  301.376324    33.038539   \n",
       "9 2010-09-01 09:00:00  33.039347 -233.240027  287.502991    33.039347   \n",
       "\n",
       "   trend_upper  additive_terms  additive_terms_lower  additive_terms_upper  \\\n",
       "0    33.032076       -7.335778             -7.335778             -7.335778   \n",
       "1    33.032884      -10.297534            -10.297534            -10.297534   \n",
       "2    33.033692      -19.618104            -19.618104            -19.618104   \n",
       "3    33.034500      -29.383836            -29.383836            -29.383836   \n",
       "4    33.035307      -31.923705            -31.923705            -31.923705   \n",
       "5    33.036115      -24.518058            -24.518058            -24.518058   \n",
       "6    33.036923      -11.538145            -11.538145            -11.538145   \n",
       "7    33.037731       -0.523980             -0.523980             -0.523980   \n",
       "8    33.038539        3.786296              3.786296              3.786296   \n",
       "9    33.039347        2.120476              2.120476              2.120476   \n",
       "\n",
       "       daily  ...    weekly  weekly_lower  weekly_upper    yearly  \\\n",
       "0  -4.533333  ... -1.250893     -1.250893     -1.250893 -1.551552   \n",
       "1  -7.568327  ... -1.151571     -1.151571     -1.151571 -1.577636   \n",
       "2 -17.011030  ... -1.003150     -1.003150     -1.003150 -1.603924   \n",
       "3 -26.947330  ... -0.806090     -0.806090     -0.806090 -1.630416   \n",
       "4 -29.705308  ... -0.561286     -0.561286     -0.561286 -1.657111   \n",
       "5 -22.564002  ... -0.270049     -0.270049     -0.270049 -1.684006   \n",
       "6  -9.892953  ...  0.065910      0.065910      0.065910 -1.711102   \n",
       "7   0.769913  ...  0.444504      0.444504      0.444504 -1.738397   \n",
       "8   4.688891  ...  0.863294      0.863294      0.863294 -1.765889   \n",
       "9   2.594537  ...  1.319517      1.319517      1.319517 -1.793578   \n",
       "\n",
       "   yearly_lower  yearly_upper  multiplicative_terms  \\\n",
       "0     -1.551552     -1.551552                   0.0   \n",
       "1     -1.577636     -1.577636                   0.0   \n",
       "2     -1.603924     -1.603924                   0.0   \n",
       "3     -1.630416     -1.630416                   0.0   \n",
       "4     -1.657111     -1.657111                   0.0   \n",
       "5     -1.684006     -1.684006                   0.0   \n",
       "6     -1.711102     -1.711102                   0.0   \n",
       "7     -1.738397     -1.738397                   0.0   \n",
       "8     -1.765889     -1.765889                   0.0   \n",
       "9     -1.793578     -1.793578                   0.0   \n",
       "\n",
       "   multiplicative_terms_lower  multiplicative_terms_upper       yhat  \n",
       "0                         0.0                         0.0  25.696298  \n",
       "1                         0.0                         0.0  22.735349  \n",
       "2                         0.0                         0.0  13.415587  \n",
       "3                         0.0                         0.0   3.650663  \n",
       "4                         0.0                         0.0   1.111602  \n",
       "5                         0.0                         0.0   8.518057  \n",
       "6                         0.0                         0.0  21.498778  \n",
       "7                         0.0                         0.0  32.513751  \n",
       "8                         0.0                         0.0  36.824835  \n",
       "9                         0.0                         0.0  35.159823  \n",
       "\n",
       "[10 rows x 22 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "future11 = model.make_future_dataframe(periods=20, freq='D') \n",
    "forecast11 = model.predict(future11) \n",
    "forecast11.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a74e54c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>yhat</th>\n",
       "      <th>yhat_lower</th>\n",
       "      <th>yhat_upper</th>\n",
       "      <th>trend</th>\n",
       "      <th>trend_lower</th>\n",
       "      <th>trend_upper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01 00:00:00</td>\n",
       "      <td>25.696298</td>\n",
       "      <td>-251.279867</td>\n",
       "      <td>283.839565</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>33.032076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-01 01:00:00</td>\n",
       "      <td>22.735349</td>\n",
       "      <td>-246.417882</td>\n",
       "      <td>290.176911</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>33.032884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-01 02:00:00</td>\n",
       "      <td>13.415587</td>\n",
       "      <td>-262.819846</td>\n",
       "      <td>297.401886</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>33.033692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-01 03:00:00</td>\n",
       "      <td>3.650663</td>\n",
       "      <td>-285.447845</td>\n",
       "      <td>277.350451</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>33.034500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-01 04:00:00</td>\n",
       "      <td>1.111602</td>\n",
       "      <td>-268.862915</td>\n",
       "      <td>251.895901</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>33.035307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92031</th>\n",
       "      <td>2021-03-16 23:00:00</td>\n",
       "      <td>-15.653429</td>\n",
       "      <td>-269.643811</td>\n",
       "      <td>239.891068</td>\n",
       "      <td>0.980819</td>\n",
       "      <td>0.980819</td>\n",
       "      <td>0.980819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92032</th>\n",
       "      <td>2021-03-17 23:00:00</td>\n",
       "      <td>-5.663542</td>\n",
       "      <td>-278.762887</td>\n",
       "      <td>269.686019</td>\n",
       "      <td>0.821788</td>\n",
       "      <td>0.821788</td>\n",
       "      <td>0.821788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92033</th>\n",
       "      <td>2021-03-18 23:00:00</td>\n",
       "      <td>-2.959175</td>\n",
       "      <td>-260.687211</td>\n",
       "      <td>271.517224</td>\n",
       "      <td>0.662757</td>\n",
       "      <td>0.662757</td>\n",
       "      <td>0.662757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92034</th>\n",
       "      <td>2021-03-19 23:00:00</td>\n",
       "      <td>-19.786543</td>\n",
       "      <td>-293.037567</td>\n",
       "      <td>241.970189</td>\n",
       "      <td>0.503726</td>\n",
       "      <td>0.503726</td>\n",
       "      <td>0.503726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92035</th>\n",
       "      <td>2021-03-20 23:00:00</td>\n",
       "      <td>-36.282073</td>\n",
       "      <td>-297.805578</td>\n",
       "      <td>227.931109</td>\n",
       "      <td>0.344696</td>\n",
       "      <td>0.344696</td>\n",
       "      <td>0.344696</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>92036 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       ds       yhat  yhat_lower  yhat_upper      trend  \\\n",
       "0     2010-09-01 00:00:00  25.696298 -251.279867  283.839565  33.032076   \n",
       "1     2010-09-01 01:00:00  22.735349 -246.417882  290.176911  33.032884   \n",
       "2     2010-09-01 02:00:00  13.415587 -262.819846  297.401886  33.033692   \n",
       "3     2010-09-01 03:00:00   3.650663 -285.447845  277.350451  33.034500   \n",
       "4     2010-09-01 04:00:00   1.111602 -268.862915  251.895901  33.035307   \n",
       "...                   ...        ...         ...         ...        ...   \n",
       "92031 2021-03-16 23:00:00 -15.653429 -269.643811  239.891068   0.980819   \n",
       "92032 2021-03-17 23:00:00  -5.663542 -278.762887  269.686019   0.821788   \n",
       "92033 2021-03-18 23:00:00  -2.959175 -260.687211  271.517224   0.662757   \n",
       "92034 2021-03-19 23:00:00 -19.786543 -293.037567  241.970189   0.503726   \n",
       "92035 2021-03-20 23:00:00 -36.282073 -297.805578  227.931109   0.344696   \n",
       "\n",
       "       trend_lower  trend_upper  \n",
       "0        33.032076    33.032076  \n",
       "1        33.032884    33.032884  \n",
       "2        33.033692    33.033692  \n",
       "3        33.034500    33.034500  \n",
       "4        33.035307    33.035307  \n",
       "...            ...          ...  \n",
       "92031     0.980819     0.980819  \n",
       "92032     0.821788     0.821788  \n",
       "92033     0.662757     0.662757  \n",
       "92034     0.503726     0.503726  \n",
       "92035     0.344696     0.344696  \n",
       "\n",
       "[92036 rows x 7 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast11[['ds', 'yhat', 'yhat_lower', 'yhat_upper', 'trend', 'trend_lower', 'trend_upper']]\n",
    "#yhat is the prediction while yhat_lower and yhat_upper are the upper and lower boundaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1a98b7e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def mape(actual, pred): \n",
    "    actual, pred = np.array(actual), np.array(pred)\n",
    "    return np.mean(np.abs((actual - pred) / actual)) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c329b876",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "132.4969568942686"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actual = y_train\n",
    "pred = forecast11['yhat'][:2757]\n",
    "\n",
    "mape(actual, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6548039c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101.46093272033143\n"
     ]
    }
   ],
   "source": [
    "#calculate rmse\n",
    "import sklearn\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import math\n",
    "from math import sqrt\n",
    "\n",
    "actual = y_train\n",
    "predicted = forecast11['yhat'][:2757]\n",
    "\n",
    "mse = sklearn.metrics.mean_squared_error(actual, predicted)\n",
    "\n",
    "rmse = math.sqrt(mse)\n",
    "\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5ada4852",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.plot(forecast11)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dca8fad8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e2b2e020",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "09:23:38 - cmdstanpy - INFO - Chain [1] start processing\n",
      "09:23:39 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<prophet.forecaster.Prophet at 0x11fca927340>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_model.fit(train) #Training of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e18facb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>trend</th>\n",
       "      <th>yhat_lower</th>\n",
       "      <th>yhat_upper</th>\n",
       "      <th>trend_lower</th>\n",
       "      <th>trend_upper</th>\n",
       "      <th>additive_terms</th>\n",
       "      <th>additive_terms_lower</th>\n",
       "      <th>additive_terms_upper</th>\n",
       "      <th>daily</th>\n",
       "      <th>...</th>\n",
       "      <th>weekly</th>\n",
       "      <th>weekly_lower</th>\n",
       "      <th>weekly_upper</th>\n",
       "      <th>yearly</th>\n",
       "      <th>yearly_lower</th>\n",
       "      <th>yearly_upper</th>\n",
       "      <th>multiplicative_terms</th>\n",
       "      <th>multiplicative_terms_lower</th>\n",
       "      <th>multiplicative_terms_upper</th>\n",
       "      <th>yhat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01 00:00:00</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>-246.172596</td>\n",
       "      <td>299.951397</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>33.032076</td>\n",
       "      <td>-7.335778</td>\n",
       "      <td>-7.335778</td>\n",
       "      <td>-7.335778</td>\n",
       "      <td>-4.533333</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.250893</td>\n",
       "      <td>-1.250893</td>\n",
       "      <td>-1.250893</td>\n",
       "      <td>-1.551552</td>\n",
       "      <td>-1.551552</td>\n",
       "      <td>-1.551552</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.696298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-01 01:00:00</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>-255.352899</td>\n",
       "      <td>286.483029</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>33.032884</td>\n",
       "      <td>-10.297534</td>\n",
       "      <td>-10.297534</td>\n",
       "      <td>-10.297534</td>\n",
       "      <td>-7.568327</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.151571</td>\n",
       "      <td>-1.151571</td>\n",
       "      <td>-1.151571</td>\n",
       "      <td>-1.577636</td>\n",
       "      <td>-1.577636</td>\n",
       "      <td>-1.577636</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.735349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-01 02:00:00</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>-261.487951</td>\n",
       "      <td>270.337534</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>33.033692</td>\n",
       "      <td>-19.618104</td>\n",
       "      <td>-19.618104</td>\n",
       "      <td>-19.618104</td>\n",
       "      <td>-17.011030</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.003150</td>\n",
       "      <td>-1.003150</td>\n",
       "      <td>-1.003150</td>\n",
       "      <td>-1.603924</td>\n",
       "      <td>-1.603924</td>\n",
       "      <td>-1.603924</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.415587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-01 03:00:00</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>-293.360661</td>\n",
       "      <td>263.676585</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>33.034500</td>\n",
       "      <td>-29.383836</td>\n",
       "      <td>-29.383836</td>\n",
       "      <td>-29.383836</td>\n",
       "      <td>-26.947330</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.806090</td>\n",
       "      <td>-0.806090</td>\n",
       "      <td>-0.806090</td>\n",
       "      <td>-1.630416</td>\n",
       "      <td>-1.630416</td>\n",
       "      <td>-1.630416</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.650663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-01 04:00:00</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>-269.320540</td>\n",
       "      <td>252.835118</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>33.035307</td>\n",
       "      <td>-31.923705</td>\n",
       "      <td>-31.923705</td>\n",
       "      <td>-31.923705</td>\n",
       "      <td>-29.705308</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.561286</td>\n",
       "      <td>-0.561286</td>\n",
       "      <td>-0.561286</td>\n",
       "      <td>-1.657111</td>\n",
       "      <td>-1.657111</td>\n",
       "      <td>-1.657111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.111602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2010-09-01 05:00:00</td>\n",
       "      <td>33.036115</td>\n",
       "      <td>-267.737956</td>\n",
       "      <td>263.820413</td>\n",
       "      <td>33.036115</td>\n",
       "      <td>33.036115</td>\n",
       "      <td>-24.518058</td>\n",
       "      <td>-24.518058</td>\n",
       "      <td>-24.518058</td>\n",
       "      <td>-22.564002</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.270049</td>\n",
       "      <td>-0.270049</td>\n",
       "      <td>-0.270049</td>\n",
       "      <td>-1.684006</td>\n",
       "      <td>-1.684006</td>\n",
       "      <td>-1.684006</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.518057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2010-09-01 06:00:00</td>\n",
       "      <td>33.036923</td>\n",
       "      <td>-272.159604</td>\n",
       "      <td>286.302162</td>\n",
       "      <td>33.036923</td>\n",
       "      <td>33.036923</td>\n",
       "      <td>-11.538145</td>\n",
       "      <td>-11.538145</td>\n",
       "      <td>-11.538145</td>\n",
       "      <td>-9.892953</td>\n",
       "      <td>...</td>\n",
       "      <td>0.065910</td>\n",
       "      <td>0.065910</td>\n",
       "      <td>0.065910</td>\n",
       "      <td>-1.711102</td>\n",
       "      <td>-1.711102</td>\n",
       "      <td>-1.711102</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.498778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2010-09-01 07:00:00</td>\n",
       "      <td>33.037731</td>\n",
       "      <td>-252.831152</td>\n",
       "      <td>293.970453</td>\n",
       "      <td>33.037731</td>\n",
       "      <td>33.037731</td>\n",
       "      <td>-0.523980</td>\n",
       "      <td>-0.523980</td>\n",
       "      <td>-0.523980</td>\n",
       "      <td>0.769913</td>\n",
       "      <td>...</td>\n",
       "      <td>0.444504</td>\n",
       "      <td>0.444504</td>\n",
       "      <td>0.444504</td>\n",
       "      <td>-1.738397</td>\n",
       "      <td>-1.738397</td>\n",
       "      <td>-1.738397</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.513751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2010-09-01 08:00:00</td>\n",
       "      <td>33.038539</td>\n",
       "      <td>-236.797975</td>\n",
       "      <td>307.199141</td>\n",
       "      <td>33.038539</td>\n",
       "      <td>33.038539</td>\n",
       "      <td>3.786296</td>\n",
       "      <td>3.786296</td>\n",
       "      <td>3.786296</td>\n",
       "      <td>4.688891</td>\n",
       "      <td>...</td>\n",
       "      <td>0.863294</td>\n",
       "      <td>0.863294</td>\n",
       "      <td>0.863294</td>\n",
       "      <td>-1.765889</td>\n",
       "      <td>-1.765889</td>\n",
       "      <td>-1.765889</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.824835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2010-09-01 09:00:00</td>\n",
       "      <td>33.039347</td>\n",
       "      <td>-235.878254</td>\n",
       "      <td>299.312544</td>\n",
       "      <td>33.039347</td>\n",
       "      <td>33.039347</td>\n",
       "      <td>2.120476</td>\n",
       "      <td>2.120476</td>\n",
       "      <td>2.120476</td>\n",
       "      <td>2.594537</td>\n",
       "      <td>...</td>\n",
       "      <td>1.319517</td>\n",
       "      <td>1.319517</td>\n",
       "      <td>1.319517</td>\n",
       "      <td>-1.793578</td>\n",
       "      <td>-1.793578</td>\n",
       "      <td>-1.793578</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.159823</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ds      trend  yhat_lower  yhat_upper  trend_lower  \\\n",
       "0 2010-09-01 00:00:00  33.032076 -246.172596  299.951397    33.032076   \n",
       "1 2010-09-01 01:00:00  33.032884 -255.352899  286.483029    33.032884   \n",
       "2 2010-09-01 02:00:00  33.033692 -261.487951  270.337534    33.033692   \n",
       "3 2010-09-01 03:00:00  33.034500 -293.360661  263.676585    33.034500   \n",
       "4 2010-09-01 04:00:00  33.035307 -269.320540  252.835118    33.035307   \n",
       "5 2010-09-01 05:00:00  33.036115 -267.737956  263.820413    33.036115   \n",
       "6 2010-09-01 06:00:00  33.036923 -272.159604  286.302162    33.036923   \n",
       "7 2010-09-01 07:00:00  33.037731 -252.831152  293.970453    33.037731   \n",
       "8 2010-09-01 08:00:00  33.038539 -236.797975  307.199141    33.038539   \n",
       "9 2010-09-01 09:00:00  33.039347 -235.878254  299.312544    33.039347   \n",
       "\n",
       "   trend_upper  additive_terms  additive_terms_lower  additive_terms_upper  \\\n",
       "0    33.032076       -7.335778             -7.335778             -7.335778   \n",
       "1    33.032884      -10.297534            -10.297534            -10.297534   \n",
       "2    33.033692      -19.618104            -19.618104            -19.618104   \n",
       "3    33.034500      -29.383836            -29.383836            -29.383836   \n",
       "4    33.035307      -31.923705            -31.923705            -31.923705   \n",
       "5    33.036115      -24.518058            -24.518058            -24.518058   \n",
       "6    33.036923      -11.538145            -11.538145            -11.538145   \n",
       "7    33.037731       -0.523980             -0.523980             -0.523980   \n",
       "8    33.038539        3.786296              3.786296              3.786296   \n",
       "9    33.039347        2.120476              2.120476              2.120476   \n",
       "\n",
       "       daily  ...    weekly  weekly_lower  weekly_upper    yearly  \\\n",
       "0  -4.533333  ... -1.250893     -1.250893     -1.250893 -1.551552   \n",
       "1  -7.568327  ... -1.151571     -1.151571     -1.151571 -1.577636   \n",
       "2 -17.011030  ... -1.003150     -1.003150     -1.003150 -1.603924   \n",
       "3 -26.947330  ... -0.806090     -0.806090     -0.806090 -1.630416   \n",
       "4 -29.705308  ... -0.561286     -0.561286     -0.561286 -1.657111   \n",
       "5 -22.564002  ... -0.270049     -0.270049     -0.270049 -1.684006   \n",
       "6  -9.892953  ...  0.065910      0.065910      0.065910 -1.711102   \n",
       "7   0.769913  ...  0.444504      0.444504      0.444504 -1.738397   \n",
       "8   4.688891  ...  0.863294      0.863294      0.863294 -1.765889   \n",
       "9   2.594537  ...  1.319517      1.319517      1.319517 -1.793578   \n",
       "\n",
       "   yearly_lower  yearly_upper  multiplicative_terms  \\\n",
       "0     -1.551552     -1.551552                   0.0   \n",
       "1     -1.577636     -1.577636                   0.0   \n",
       "2     -1.603924     -1.603924                   0.0   \n",
       "3     -1.630416     -1.630416                   0.0   \n",
       "4     -1.657111     -1.657111                   0.0   \n",
       "5     -1.684006     -1.684006                   0.0   \n",
       "6     -1.711102     -1.711102                   0.0   \n",
       "7     -1.738397     -1.738397                   0.0   \n",
       "8     -1.765889     -1.765889                   0.0   \n",
       "9     -1.793578     -1.793578                   0.0   \n",
       "\n",
       "   multiplicative_terms_lower  multiplicative_terms_upper       yhat  \n",
       "0                         0.0                         0.0  25.696298  \n",
       "1                         0.0                         0.0  22.735349  \n",
       "2                         0.0                         0.0  13.415587  \n",
       "3                         0.0                         0.0   3.650663  \n",
       "4                         0.0                         0.0   1.111602  \n",
       "5                         0.0                         0.0   8.518057  \n",
       "6                         0.0                         0.0  21.498778  \n",
       "7                         0.0                         0.0  32.513751  \n",
       "8                         0.0                         0.0  36.824835  \n",
       "9                         0.0                         0.0  35.159823  \n",
       "\n",
       "[10 rows x 22 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "future1 = new_model.make_future_dataframe(periods=20, freq='D') \n",
    "forecast1 = model.predict(future1) \n",
    "forecast1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b1417222",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2777, 22)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "81ee91a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate MAPE\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "def mape(actual, pred): \n",
    "    actual, pred = np.array(actual), np.array(pred)\n",
    "    return np.mean(np.abs((actual - pred) / actual)) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b86686f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# actual = y_test\n",
    "# pred = forecast['yhat'][:365]\n",
    "\n",
    "# mape(actual, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "665d65e2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
